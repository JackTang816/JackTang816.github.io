<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JackTang&#39;s Blog</title>
    <link>https://jacktang816.github.io/</link>
    <description>Recent content on JackTang&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 15 Jun 2019 09:31:08 +0800</lastBuildDate>
    
	<atom:link href="https://jacktang816.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C&#43;&#43;中内存管理之new/delete</title>
      <link>https://jacktang816.github.io/post/cppnewdelete/</link>
      <pubDate>Sat, 15 Jun 2019 09:31:08 +0800</pubDate>
      
      <guid>https://jacktang816.github.io/post/cppnewdelete/</guid>
      <description>&lt;p&gt;在之前的malloc和free的实现原理解析一文中，我主要分析了C语言中常用的两个内存管理函数&lt;code&gt;malloc()&lt;/code&gt;和&lt;code&gt;free()&lt;/code&gt;的相关细节。内存管理则是主要通过运算符&lt;code&gt;new&lt;/code&gt;, &lt;code&gt;new[]&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;和&lt;code&gt;delete[]&lt;/code&gt;来实现。按照C++标准&lt;code&gt;new/delete&lt;/code&gt;和&lt;code&gt;new[]/delete[]&lt;/code&gt;并不是C++中的函数，而是C++中的关键字。之所以有这样的区别，C++中在对象创建时需要自动执行构造函数，而在对象销毁时需要自动执行对象的析构函数。而&lt;code&gt;malloc()/free()&lt;/code&gt;则是库函数而非运算符，不在编译器控制权限之内，无法把执行构造函数和析构函数的任务强加于&lt;code&gt;malloc()/free()&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;虚函数的实现基本原理</title>
      <link>https://jacktang816.github.io/post/virtualfunction/</link>
      <pubDate>Sun, 09 Jun 2019 14:59:47 +0800</pubDate>
      
      <guid>https://jacktang816.github.io/post/virtualfunction/</guid>
      <description>&lt;p&gt;c++作为面向对象的语言，主要有三大特性：继承、封装、多态。关于多态，简而言之就是用父类型的指针指向其子类的实例，然后通过父类的指针调用实际子类的成员函数。这种技术可以让父类的指针有“多种形态”，这是一种泛型技术。所谓泛型技术，说白了就是试图使用不变的代码来实现可变的算法。比如：模板技术，RTTI技术，虚函数技术，要么是试图做到在编译时绑定，要么试图做到运行时绑定。因此C++的多态分为静态多态（编译时多态）和动态多态（运行时多态）两大类。静态多态通过重载、模板来实现；动态多态就是通过本文的主角虚函数来体现的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>malloc和free的实现原理解析</title>
      <link>https://jacktang816.github.io/post/mallocandfree/</link>
      <pubDate>Sat, 08 Jun 2019 16:54:41 +0800</pubDate>
      
      <guid>https://jacktang816.github.io/post/mallocandfree/</guid>
      <description>&lt;p&gt;C语言中使用malloc可以分配一段连续的内存空间。在c/c++开发中，因为malloc属于C标准库函数，经常会使用其分配内存。malloc是在堆中分配一块可用内存给用户。作为一个使用频繁的基础函数，理解清楚其实现原理很有必要，因此本文主要探讨malloc的具体实现原理，以及在linux系统中这该函数的实现方式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>二叉搜索树与双向链表</title>
      <link>https://jacktang816.github.io/post/offer-bst2dequeue/</link>
      <pubDate>Fri, 07 Jun 2019 01:05:10 +0800</pubDate>
      
      <guid>https://jacktang816.github.io/post/offer-bst2dequeue/</guid>
      <description>&lt;p&gt;输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。
&lt;img src=&#34;https://jacktang816.github.io/img/dataStructure/BST2Dequeue/questionDescribe.png&#34; alt=&#34;&amp;quot;二叉搜索树转双向链表&amp;quot;&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>二叉树遍历二三事</title>
      <link>https://jacktang816.github.io/post/bitreetranspose/</link>
      <pubDate>Thu, 06 Jun 2019 00:59:21 +0800</pubDate>
      
      <guid>https://jacktang816.github.io/post/bitreetranspose/</guid>
      <description>&lt;p&gt;二叉树是一种非常重要的数据结构，可以视为一种介于图和链表之间的半线性数据结构，或者视为一种特殊的图。因此对于二叉树，有深度优先遍历和广度优先遍历，深度优先遍历有前序、中序以及后序三种遍历方法，而广度优先遍历即是层序遍历，一次遍历二叉树每一层节点。因为树的定义本身就是递归定义，因此采用递归的方法去实现树的三种深度优先遍历不仅容易理解而且代码很简洁，而递归本身是操作系统内部实现了栈结构来实现，因此我们可以通过自己构造栈结构来将递归实现转化为迭代实现。而对于广度优先的层序遍历则需要借助队列实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HTTP协议详解</title>
      <link>https://jacktang816.github.io/post/http_protocol/</link>
      <pubDate>Sun, 02 Jun 2019 21:42:36 +0800</pubDate>
      
      <guid>https://jacktang816.github.io/post/http_protocol/</guid>
      <description>&lt;p&gt;HTTP（超文本传输协议）是一个基于请求与响应模式的、无状态的、应用层的协议，&lt;del&gt;常基于&lt;/del&gt;（事实上）TCP的连接方式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>What is Cookie？</title>
      <link>https://jacktang816.github.io/post/cookie/</link>
      <pubDate>Sun, 02 Jun 2019 18:17:34 +0800</pubDate>
      
      <guid>https://jacktang816.github.io/post/cookie/</guid>
      <description>&lt;p&gt;由于HTTP协议是无状态的协议，一旦数据交换完毕，客户端与服务器端的连接就会关闭，再次交换需要建立新的连接。也就是说服务器无法从连接上跟踪会话，比如用户A购买了一件商品放入购物车，当再次购买时服务器已经无法判断该行为是否仍然属于用户A。引入Cookie机制则是为了弥补HTTP协议这一不足。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>进程间通信——Pipe</title>
      <link>https://jacktang816.github.io/post/pipe/</link>
      <pubDate>Sat, 01 Jun 2019 21:19:36 +0800</pubDate>
      
      <guid>https://jacktang816.github.io/post/pipe/</guid>
      <description>&lt;p&gt;UNIX中实现进程间通信的方式很多，比如管道、消息队列、共享内存、信号量、套接字等，前面四种主要用于同一台机器上的进程间通信，而套接字主要用于不同机器之间的通信。但是极少方法能在所有的UNIX系统中移植，而作为半双工的管道则是唯一一种方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tinyhttpd 阅读与分析</title>
      <link>https://jacktang816.github.io/post/tinyhttpdread/</link>
      <pubDate>Fri, 31 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jacktang816.github.io/post/tinyhttpdread/</guid>
      <description>&lt;p&gt;tinyhttpd 是一个简易的 http 服务器，支持CGI。代码量少，非常容易阅读，十分适合网络编程初学者学习的项目。
麻雀虽小，五脏俱全。在tinyhttpd中可以学到 linux 上进程的创建，管道的使用。linux 下 socket 编程基本方法和http 协议的最基本结构。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>