<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>new on JackTang&#39;s Blog</title>
    <link>https://jacktang816.github.io/tags/new/</link>
    <description>Recent content in new on JackTang&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 15 Jun 2019 09:31:08 +0800</lastBuildDate>
    
	<atom:link href="https://jacktang816.github.io/tags/new/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C&#43;&#43;中内存管理之new/delete</title>
      <link>https://jacktang816.github.io/post/cppnewdelete/</link>
      <pubDate>Sat, 15 Jun 2019 09:31:08 +0800</pubDate>
      
      <guid>https://jacktang816.github.io/post/cppnewdelete/</guid>
      <description>&lt;p&gt;在之前的malloc和free的实现原理解析一文中，我主要分析了C语言中常用的两个内存管理函数&lt;code&gt;malloc()&lt;/code&gt;和&lt;code&gt;free()&lt;/code&gt;的相关细节。内存管理则是主要通过运算符&lt;code&gt;new&lt;/code&gt;, &lt;code&gt;new[]&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;和&lt;code&gt;delete[]&lt;/code&gt;来实现。按照C++标准&lt;code&gt;new/delete&lt;/code&gt;和&lt;code&gt;new[]/delete[]&lt;/code&gt;并不是C++中的函数，而是C++中的关键字。之所以有这样的区别，C++中在对象创建时需要自动执行构造函数，而在对象销毁时需要自动执行对象的析构函数。而&lt;code&gt;malloc()/free()&lt;/code&gt;则是库函数而非运算符，不在编译器控制权限之内，无法把执行构造函数和析构函数的任务强加于&lt;code&gt;malloc()/free()&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>