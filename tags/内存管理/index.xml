<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>内存管理 on JackTang&#39;s Blog</title>
    <link>https://jacktang816.github.io/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
    <description>Recent content in 内存管理 on JackTang&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 15 Jun 2019 09:31:08 +0800</lastBuildDate>
    
	<atom:link href="https://jacktang816.github.io/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C&#43;&#43;中内存管理之new/delete</title>
      <link>https://jacktang816.github.io/post/cppnewdelete/</link>
      <pubDate>Sat, 15 Jun 2019 09:31:08 +0800</pubDate>
      
      <guid>https://jacktang816.github.io/post/cppnewdelete/</guid>
      <description>&lt;p&gt;在之前的&lt;a href=&#34;https://jacktang816.github.io/post/mallocandfree&#34;&gt;malloc和free的实现原理解析&lt;/a&gt;一文中，我主要分析了C语言中常用的两个内存管理函数&lt;code&gt;malloc()&lt;/code&gt;和&lt;code&gt;free()&lt;/code&gt;的相关细节。内存管理则是主要通过运算符&lt;code&gt;new&lt;/code&gt;, &lt;code&gt;new[]&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;和&lt;code&gt;delete[]&lt;/code&gt;来实现。按照C++标准&lt;code&gt;new/delete&lt;/code&gt;和&lt;code&gt;new[]/delete[]&lt;/code&gt;并不是C++中的函数，而是C++中的关键字。之所以有这样的区别，C++中在对象创建时需要自动执行构造函数，而在对象销毁时需要自动执行对象的析构函数。而&lt;code&gt;malloc()/free()&lt;/code&gt;则是库函数而非运算符，不在编译器控制权限之内，无法把执行构造函数和析构函数的任务强加于&lt;code&gt;malloc()/free()&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>内存碎片之外部碎片与内部碎片</title>
      <link>https://jacktang816.github.io/post/memoryfragmentation/</link>
      <pubDate>Sun, 09 Jun 2019 23:57:16 +0800</pubDate>
      
      <guid>https://jacktang816.github.io/post/memoryfragmentation/</guid>
      <description>&lt;p&gt;“内存碎片”描述了一个系统中所有不可用的空闲内存。这些资源之所以仍然未被使用，是因为负责分配内存的分配器使这些内存无法使用，原因在于空闲内存以小而不连续方式出现在不同的位置，内存分配器无法将这些内存利用起来分配给新的进程。由于分配方法决定内存碎片是否是一个问题，因此内存分配器在保证空闲资源可用性方面扮演着重要的角色。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>malloc和free的实现原理解析</title>
      <link>https://jacktang816.github.io/post/mallocandfree/</link>
      <pubDate>Sat, 08 Jun 2019 16:54:41 +0800</pubDate>
      
      <guid>https://jacktang816.github.io/post/mallocandfree/</guid>
      <description>&lt;p&gt;C语言中使用malloc可以分配一段连续的内存空间。在c/c++开发中，因为malloc属于C标准库函数，经常会使用其分配内存。malloc是在堆中分配一块可用内存给用户。作为一个使用频繁的基础函数，理解清楚其实现原理很有必要，因此本文主要探讨malloc的具体实现原理，以及在linux系统中这该函数的实现方式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>常用寄存器总结</title>
      <link>https://jacktang816.github.io/post/register/</link>
      <pubDate>Fri, 07 Jun 2019 19:14:30 +0800</pubDate>
      
      <guid>https://jacktang816.github.io/post/register/</guid>
      <description>&lt;p&gt;80386寄存器共有34个寄存器，可分为7类，它们是通用寄存器，指令指针和标志寄存器，段寄存器，系统地址寄存器，控制寄存器、调试和测试寄存器。我们经常碰到的是前四类寄存器，也是我这篇文章总结的重点。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>