<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c/c&#43;&#43; on JackTang&#39;s Blog</title>
    <link>https://jacktang816.github.io/tags/c/c&#43;&#43;/</link>
    <description>Recent content in c/c&#43;&#43; on JackTang&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 16 Jun 2019 21:43:29 +0800</lastBuildDate>
    
	<atom:link href="https://jacktang816.github.io/tags/c/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>单例模式Singleton</title>
      <link>https://jacktang816.github.io/post/singleton/</link>
      <pubDate>Sun, 16 Jun 2019 21:43:29 +0800</pubDate>
      
      <guid>https://jacktang816.github.io/post/singleton/</guid>
      <description>&lt;p&gt;单例模式（Singleton）是用于保证在整个应用程序的生命周期中的任何一个时刻，单例类的实例都只存在一个或者不存在。许多设备管理器常常设计为单例模式，比如很经典的电脑打印程序的设计，一台计算可以链接多台打印机，但是在整个打印过程中只能有一个打印程序的实例，不能让多台打印机打印同一份文件。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;中内存管理之new/delete</title>
      <link>https://jacktang816.github.io/post/cppnewdelete/</link>
      <pubDate>Sat, 15 Jun 2019 09:31:08 +0800</pubDate>
      
      <guid>https://jacktang816.github.io/post/cppnewdelete/</guid>
      <description>&lt;p&gt;在之前的&lt;a href=&#34;https://jacktang816.github.io/post/mallocandfree&#34;&gt;malloc和free的实现原理解析&lt;/a&gt;一文中，我主要分析了C语言中常用的两个内存管理函数&lt;code&gt;malloc()&lt;/code&gt;和&lt;code&gt;free()&lt;/code&gt;的相关细节。内存管理则是主要通过运算符&lt;code&gt;new&lt;/code&gt;, &lt;code&gt;new[]&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;和&lt;code&gt;delete[]&lt;/code&gt;来实现。按照C++标准&lt;code&gt;new/delete&lt;/code&gt;和&lt;code&gt;new[]/delete[]&lt;/code&gt;并不是C++中的函数，而是C++中的关键字。之所以有这样的区别，C++中在对象创建时需要自动执行构造函数，而在对象销毁时需要自动执行对象的析构函数。而&lt;code&gt;malloc()/free()&lt;/code&gt;则是库函数而非运算符，不在编译器控制权限之内，无法把执行构造函数和析构函数的任务强加于&lt;code&gt;malloc()/free()&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;虚函数的实现基本原理</title>
      <link>https://jacktang816.github.io/post/virtualfunction/</link>
      <pubDate>Sun, 09 Jun 2019 14:59:47 +0800</pubDate>
      
      <guid>https://jacktang816.github.io/post/virtualfunction/</guid>
      <description>&lt;p&gt;c++作为面向对象的语言，主要有三大特性：继承、封装、多态。关于多态，简而言之就是用父类型的指针指向其子类的实例，然后通过父类的指针调用实际子类的成员函数。这种技术可以让父类的指针有“多种形态”，这是一种泛型技术。所谓泛型技术，说白了就是试图使用不变的代码来实现可变的算法。比如：模板技术，RTTI技术，虚函数技术，要么是试图做到在编译时绑定，要么试图做到运行时绑定。因此C++的多态分为静态多态（编译时多态）和动态多态（运行时多态）两大类。静态多态通过重载、模板来实现；动态多态就是通过本文的主角虚函数来体现的。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>