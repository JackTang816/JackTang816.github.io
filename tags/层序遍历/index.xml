<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>层序遍历 on JackTang&#39;s Blog</title>
    <link>https://jacktang816.github.io/tags/%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</link>
    <description>Recent content in 层序遍历 on JackTang&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 06 Jun 2019 00:59:21 +0800</lastBuildDate>
    
	<atom:link href="https://jacktang816.github.io/tags/%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>二叉树遍历二三事</title>
      <link>https://jacktang816.github.io/post/bitreetranspose/</link>
      <pubDate>Thu, 06 Jun 2019 00:59:21 +0800</pubDate>
      
      <guid>https://jacktang816.github.io/post/bitreetranspose/</guid>
      <description>&lt;p&gt;二叉树是一种非常重要的数据结构，可以视为一种介于图和链表之间的半线性数据结构，或者视为一种特殊的图。因此对于二叉树，有深度优先遍历和广度优先遍历，深度优先遍历有前序、中序以及后序三种遍历方法，而广度优先遍历即是层序遍历，一次遍历二叉树每一层节点。因为树的定义本身就是递归定义，因此采用递归的方法去实现树的三种深度优先遍历不仅容易理解而且代码很简洁，而递归本身是操作系统内部实现了栈结构来实现，因此我们可以通过自己构造栈结构来将递归实现转化为迭代实现。而对于广度优先的层序遍历则需要借助队列实现。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>