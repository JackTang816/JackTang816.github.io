<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>外部碎片 on JackTang&#39;s Blog</title>
    <link>https://jacktang816.github.io/tags/%E5%A4%96%E9%83%A8%E7%A2%8E%E7%89%87/</link>
    <description>Recent content in 外部碎片 on JackTang&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 14 Jul 2019 21:34:18 +0800</lastBuildDate>
    
	<atom:link href="https://jacktang816.github.io/tags/%E5%A4%96%E9%83%A8%E7%A2%8E%E7%89%87/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux中的内存管理机制</title>
      <link>https://jacktang816.github.io/post/linuxmemorymanage/</link>
      <pubDate>Sun, 14 Jul 2019 21:34:18 +0800</pubDate>
      
      <guid>https://jacktang816.github.io/post/linuxmemorymanage/</guid>
      <description>&lt;p&gt;程序在运行时所有的数据结构的分配都是在堆和栈上进行的，而堆和栈都是建立在内存之上。内存作为现代计算机运行的核心，CPU可以直接访问的通用存储只有内存和处理器内置的寄存器，所有的代码都需要装载到内存之后才能让CPU通过指令寄存器找到相应的地址进行访问。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>内存碎片之外部碎片与内部碎片</title>
      <link>https://jacktang816.github.io/post/memoryfragmentation/</link>
      <pubDate>Sun, 09 Jun 2019 23:57:16 +0800</pubDate>
      
      <guid>https://jacktang816.github.io/post/memoryfragmentation/</guid>
      <description>&lt;p&gt;“内存碎片”描述了一个系统中所有不可用的空闲内存。这些资源之所以仍然未被使用，是因为负责分配内存的分配器使这些内存无法使用，原因在于空闲内存以小而不连续方式出现在不同的位置，内存分配器无法将这些内存利用起来分配给新的进程。由于分配方法决定内存碎片是否是一个问题，因此内存分配器在保证空闲资源可用性方面扮演着重要的角色。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>