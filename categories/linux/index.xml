<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on JackTang&#39;s Blog</title>
    <link>https://jacktang816.github.io/categories/linux/</link>
    <description>Recent content in Linux on JackTang&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 12 Jun 2019 21:27:12 +0800</lastBuildDate>
    
	<atom:link href="https://jacktang816.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Unix/Linux 中的五种 I/O 模型</title>
      <link>https://jacktang816.github.io/post/iomodel/</link>
      <pubDate>Wed, 12 Jun 2019 21:27:12 +0800</pubDate>
      
      <guid>https://jacktang816.github.io/post/iomodel/</guid>
      <description>&lt;p&gt;IO模型的选择在Linux网络编程中十分重要，在Unix/Linux环境中主要提供了五种不同的IO模型，分别是阻塞式IO、非阻塞式IO、IO多路复用、信号驱动式IO和异步IO。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>内存碎片之外部碎片与内部碎片</title>
      <link>https://jacktang816.github.io/post/memoryfragmentation/</link>
      <pubDate>Sun, 09 Jun 2019 23:57:16 +0800</pubDate>
      
      <guid>https://jacktang816.github.io/post/memoryfragmentation/</guid>
      <description>&lt;p&gt;“内存碎片”描述了一个系统中所有不可用的空闲内存。这些资源之所以仍然未被使用，是因为负责分配内存的分配器使这些内存无法使用，原因在于空闲内存以小而不连续方式出现在不同的位置，内存分配器无法将这些内存利用起来分配给新的进程。由于分配方法决定内存碎片是否是一个问题，因此内存分配器在保证空闲资源可用性方面扮演着重要的角色。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>malloc和free的实现原理解析</title>
      <link>https://jacktang816.github.io/post/mallocandfree/</link>
      <pubDate>Sat, 08 Jun 2019 16:54:41 +0800</pubDate>
      
      <guid>https://jacktang816.github.io/post/mallocandfree/</guid>
      <description>&lt;p&gt;C语言中使用malloc可以分配一段连续的内存空间。在c/c++开发中，因为malloc属于C标准库函数，经常会使用其分配内存。malloc是在堆中分配一块可用内存给用户。作为一个使用频繁的基础函数，理解清楚其实现原理很有必要，因此本文主要探讨malloc的具体实现原理，以及在linux系统中这该函数的实现方式。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>